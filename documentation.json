{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PopoverDirective",
            "id": "directive-PopoverDirective-d75bfca72a51457a336540f7f9c2f5c6",
            "file": "src/app/directives/popover.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appPopover]'\n})\nexport class PopoverDirective implements OnInit {\n@Input('appPopover') popoverText:any;\n@Input() placement:string;\n@Input() delay:number;\npopover:HTMLElement;\noffset:10;\n\n  constructor(private el:ElementRef,private renderer :Renderer2) { }\n  ngOnInit(): void {\n    \n  }\n  @HostListener('mouseenter') onMouseEnter(){\n    if(!this.popover){\n      this.show();\n    }\n  }\n  @HostListener('mouseleave') onMouseLeave(){\n    if(this.popover){\n      this.hide();\n    }\n  }\n\n  show(){\n    this.create();\n    this.setPosition();\n    this.renderer.addClass(this.popover,'ng-popover-show');\n  }\n  hide(){\n    this.renderer.removeClass(this.popover,'ng-popover-show');\n    window.setTimeout(()=>{\n      this.renderer.removeChild(document.body,this.popover);\n      this.popover=null;\n    },this.delay);\n  }\n  \ncreate(){\n  this.popover=this.renderer.createElement(\"div\");\n  for(var i in this.popoverText){\n    for(var j in this.popoverText[i]){\n    let keyValuePair=this.renderer.createElement(\"div\");\n    let key=this.renderer.createElement(\"span\");\n    this.renderer.addClass(key,'popover-key');\n    this.renderer.appendChild(key,this.renderer.createText(j +': '));\n    this.renderer.appendChild(keyValuePair,key);\n    this.renderer.appendChild(\n      keyValuePair,\n      this.renderer.createText(this.popoverText[i][j]),\n    );\n    this.renderer.appendChild(this.popover,keyValuePair);\n  }\n}\nthis.renderer.appendChild(document.body,this.popover);\nthis.renderer.addClass(this.popover,'ng-popover');\nthis.renderer.addClass(this.popover,'ng-popover-${this.placement}');\nthis.renderer.setStyle(this.popover,'-webkit-transition','opacity ${this.delay}ms');\nthis.renderer.setStyle(this.popover,'-moz-transition','opacity ${this.delay}ms');\nthis.renderer.setStyle(this.popover,'-o-transition','opacity${this.delay}ms');\nthis.renderer.setStyle(this.popover,'transition','opacity${this.delay}ms');\n\n\n}\nsetPosition(){\n  const hostPos=this.el.nativeElement.getBoundingClientRect();\n  const popoverPos=this.popover.getBoundingClientRect();\n  const scrollPos=window.pageYOffset||\n  document.documentElement.scrollTop||\n  document.body.scrollTop||\n  0;\n  let top,left;\n  if(this.placement==='top'){\n    top=hostPos.top -popoverPos.height -this.offset;\n    left=hostPos.left+(hostPos.width-popoverPos.width)/2;\n\n  }\n  if(this.placement==='bottom'){\n    top=hostPos.bottom +this.offset;\n    left=hostPos.left+(hostPos.width-popoverPos.width)/2;\n\n  }\n  if(this.placement==='left'){\n    left=hostPos.left -popoverPos.width -this.offset;\n    top=hostPos.top+(hostPos.height-popoverPos.height)/2;\n\n  }\n  if(this.placement==='right'){\n    left=hostPos.right +this.offset;\n    top=hostPos.top+(hostPos.height-popoverPos.height)/2;\n\n  }\n  this.renderer.setStyle(this.popover,'top','${top+scrollPos}px');\n  this.renderer.setStyle(this.popover,'left','${left}px');\n\n}\n\n\n}\n",
            "selector": "[appPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appPopover",
                    "line": 7,
                    "type": "any"
                },
                {
                    "name": "delay",
                    "line": 9,
                    "type": "number"
                },
                {
                    "name": "placement",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 17
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 22
                }
            ],
            "propertiesClass": [
                {
                    "name": "offset",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "popover",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "setPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-30ebfa9daf05fea1527b0bf32f678dcd",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybook-app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'storybook-app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "BarComponent",
            "id": "component-BarComponent-56b60760d1f083ea1b2d91a94427c384",
            "file": "src/app/components/bar/bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bar",
            "styleUrls": [
                "./bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barChartData",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartDataCopy",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartLegend",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartOptions",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartOptionsCopy",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartPlugins",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "barChartType",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartDataSets } from 'chart.js';\nimport {  ChartOptions,ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-bar',\n  templateUrl: './bar.component.html',\n  styleUrls: ['./bar.component.scss']\n})\nexport class BarComponent implements OnInit {\n@Input() data;\npublic barChartType: ChartType;\npublic barChartLabels:Label[];\npublic barChartData:ChartDataSets[];\npublic barChartLegend;\npublic barChartPlugins;\npublic barChartOptions:ChartOptions;\npublic barChartDataCopy:any;\npublic barChartOptionsCopy:any;\n\n\n\n  constructor() {\n    this.barChartOptions={\n    responsive:true,}\n    this.barChartPlugins=[];\n   }\n\n  ngOnInit(): void {\n    this.barChartType=this.data.data.chartType;\n    this.barChartLegend=this.data.data.showLegend;\n    this.barChartLabels=this.data.data.chartLabels;\n    this.barChartData=this.data.data.chartData;\n    this.barChartDataCopy=JSON.parse(JSON.stringify(this.barChartData));\n    this.barChartOptionsCopy=JSON.parse(JSON.stringify(this.barChartOptions))\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display:block;\">\n<canvas baseChart [datasets]=\"barChartDataCopy\"\n[labels]=\"barChartLabels\" [options]=\"barChartOptionsCopy\"\n[plugins]=\"barChartPlugins\" [legend]=\"barChartLegend\" [chartType]=\"barChartType\">\n</canvas>\n</div>\n"
        },
        {
            "name": "BubbleComponent",
            "id": "component-BubbleComponent-e4d88847fcdb6a908d79d62974368b29",
            "file": "src/app/components/bubble/bubble.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bubble",
            "styleUrls": [
                "./bubble.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bubble.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "circleMarkers",
                    "defaultValue": "[]",
                    "type": "CircleMarker[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mapOptions",
                    "type": "MapOptions",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getMarkerColor",
                    "args": [
                        {
                            "name": "env",
                            "type": "String"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "String",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initMapOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "makeDataMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnInit } from '@angular/core';\nimport { circleMarker, CircleMarker, latLng, MapOptions, tileLayer } from 'leaflet';\n\n@Component({\n  selector: 'app-bubble',\n  templateUrl: './bubble.component.html',\n  styleUrls: ['./bubble.component.scss']\n})\nexport class BubbleComponent implements OnInit,AfterViewInit{\nmapOptions: MapOptions;\n@Input() data;\ncircleMarkers:CircleMarker[]=[];\ncolor:string;\n\n  constructor() { \n   \n  }\n\n  ngOnInit(): void {\n\n    this.initMapOptions();\n  }\nngAfterViewInit(){\nthis.makeDataMarkers();\n}\nprivate initMapOptions(){\n  this.mapOptions={\n    layers:[\n      tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{\n        attribution:'&copy;Attribution',\n\n      }),\n    ],\n    zoom:1,\n    center:latLng([46.227,2.213]),\n  };\n  console.log(this.mapOptions)\n}\nmakeDataMarkers(){\n  \n  console.log(this.data.data)\n  for(var c in this.data.data){\n    const lat=(this.data.data[c][\"coordinates\"][0]);\n    const lon=(this.data.data[c][\"coordinates\"][1]);\n    const circlemarker=circleMarker([lat,lon],{\n      radius:this.data.data[c][\"count\"],\n      fillOpacity:0.5,\n      color:'White',\n      fillColor:this.getMarkerColor(this.data.data[c][\"color\"]),\n      weight:1,\n\n    })\n    \n    var customPopup='<b>Vehicle: </b>' +this.data.data[c][\"vehicleType\"] + '<br><b>Count:</b>'+this.data.data[c][\"count\"];\n  \n    circlemarker.bindPopup(customPopup);\n    circlemarker.on('mouseover',function(e){\n      this.openPopup();\n    });\n    circlemarker.on('mouseout',function(e){\n      this.closePopup();\n    });\n    this.circleMarkers.push(circlemarker);\n    console.log(this.circleMarkers)\n\n  }\n}\n\ngetMarkerColor(env:String){\n  switch(env){\n    case \"red\":\n      this.color=\"red\"\n    case \"black\":\n      this.color=\"red\";\n      break;\n    default:\n      this.color=\"orange\"\n  }\n  return this.color;\n}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".map {\r\n    height: 350px;\r\n    padding: 0;\r\n}\r\n",
                    "styleUrl": "./bubble.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"map\" leaflet [leafletOptions]=\"mapOptions\" [leafletLayers]=\"circleMarkers\">\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "DoughnutComponent",
            "id": "component-DoughnutComponent-84d5d7e94037be3a91f930b73f3067cf",
            "file": "src/app/components/doughnut/doughnut.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-doughnut",
            "styleUrls": [
                "./doughnut.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./doughnut.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "doughnutChartData",
                    "type": "SingleDataSet",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartLegend",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartOptions",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartPlugins",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartType",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartOptions, ChartType } from 'chart.js';\nimport { Label, SingleDataSet } from 'ng2-charts';\n\n@Component({\n  selector: 'app-doughnut',\n  templateUrl: './doughnut.component.html',\n  styleUrls: ['./doughnut.component.scss']\n})\nexport class DoughnutComponent implements OnInit {\n\n  @Input() data;\npublic doughnutChartType: ChartType;\npublic doughnutChartLabels:Label[];\npublic doughnutChartData:SingleDataSet;\npublic doughnutChartLegend;\npublic doughnutChartPlugins;\npublic doughnutChartOptions:ChartOptions;\n\n\n\n\n  constructor() {\n    this.doughnutChartType='doughnut';\n    this.doughnutChartOptions={\n    responsive:true,}\n    this.doughnutChartPlugins=[];\n   }\n\n  ngOnInit(): void {\n    this.doughnutChartLabels=this.data.chartLabels;\n    this.doughnutChartLegend=this.data.showLegend;\n    this.doughnutChartData=this.data.chartData;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./doughnut.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display:block;\">\n    <canvas baseChart [data]=\"doughnutChartData\"\n    [labels]=\"doughnutChartLabels\" [options]=\"doughnutChartOptions\"\n    [plugins]=\"doughnutChartPlugins\" [legend]=\"doughnutChartLegend\" [chartType]=\"doughnutChartType\">\n    </canvas>\n    </div>\n    "
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IframeComponent",
            "id": "component-IframeComponent-88fb26bda827890f9e29e933d287e7cc",
            "file": "src/app/components/iframe/iframe.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-iframe",
            "styleUrls": [
                "./iframe.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./iframe.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "url",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getsafeurl",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-iframe',\n  templateUrl: './iframe.component.html',\n  styleUrls: ['./iframe.component.scss']\n})\nexport class IframeComponent implements OnInit,AfterViewInit {\n@Input() url:any;\n  constructor(private sanitizer:DomSanitizer,private cd:ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n  }\n  ngAfterViewInit(){\n    this.cd.detectChanges();\n  }\n  getsafeurl(){\n    return this.sanitizer.bypassSecurityTrustResourceUrl(this.url);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iframe-container{height:570px;width:100%;border:0}\r\n",
                    "styleUrl": "./iframe.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"iframe-container\">\n    <iframe [src]=\"getsafeurl()\"></iframe>\n</div>>"
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-93ae6bb830b9aad05c59f58775798f20",
            "file": "src/app/components/image/image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "altTxt",
                    "defaultValue": "'Pondicherry French Hotel'",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "figCaptionTxt",
                    "defaultValue": "'optional caption'",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "imgOpacity",
                    "defaultValue": "1",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "imgSrc",
                    "defaultValue": "'assets/pondicherry_french_hotel.jpg'",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n\n  @Input()\n  imgSrc: string = 'assets/pondicherry_french_hotel.jpg';\n\n  @Input()\n  altTxt?: string = 'Pondicherry French Hotel';\n\n  @Input()\n  figCaptionTxt?: string =\n    'optional caption';\n\n  @Input()\n  imgOpacity?: number = 1;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "figcaption {\r\n    background-color: #ddd;\r\n    color: #000;\r\n    font-style: italic;\r\n    padding: 5px;\r\n    text-align: center;\r\n    font-size: 18px;\r\n  }",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<figure>\n    <img\n      [ngStyle]=\"{ opacity: imgOpacity }\"\n      src=\"{{ imgSrc }}\"\n      alt=\"{{ altTxt }}\"\n      style=\"width: 100%;\"\n    />\n    <figcaption *ngIf=\"figCaptionTxt && figCaptionTxt.trim().length > 0\">\n      {{ figCaptionTxt }}\n    </figcaption>\n  </figure>"
        },
        {
            "name": "LineComponent",
            "id": "component-LineComponent-e26895bb8ef2b5da6accf3eb2f5f792e",
            "file": "src/app/components/line/line.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-line",
            "styleUrls": [
                "./line.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./line.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lineChartColors",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartData",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartLegend",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartOptions",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartPlugins",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lineChartType",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-line',\n  templateUrl: './line.component.html',\n  styleUrls: ['./line.component.scss']\n})\nexport class LineComponent implements OnInit {\n@Input() data;\npublic lineChartType: ChartType;\npublic lineChartLabels:Label[];\npublic lineChartData:ChartDataSets[];\npublic lineChartLegend;\npublic lineChartPlugins;\npublic lineChartOptions:ChartOptions;\npublic lineChartColors:Color[];\n\n\n\n  constructor() {\n    this.lineChartType='line';\n    this.lineChartOptions={\n    responsive:true,}\n    this.lineChartPlugins=[];\n    this.lineChartColors=[\n      {\n        borderColor:'black',\n        backgroundColor:'rgba(255,0,,0,0.3)',\n      },\n    ]\n   }\n  \n\n  ngOnInit(): void {\n    this.lineChartLegend=this.data.showLegend;\n    this.lineChartLabels=this.data.chartLabels;\n    this.lineChartData=this.data.chartData;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./line.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display:block;\">\n    <canvas baseChart [datasets]=\"lineChartData\"\n    [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [colors]=\"lineChartColors\"\n    [plugins]=\"lineChartPlugins\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\">\n    </canvas>\n    </div>\n    "
        },
        {
            "name": "NetworkGraphComponent",
            "id": "component-NetworkGraphComponent-92db567670d929084bdd73594541500e",
            "file": "src/app/components/network-graph/network-graph.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-network-graph",
            "styleUrls": [
                "./network-graph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./network-graph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "popover$",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "children",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "edges",
                    "type": "Edge",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "edgesCopy",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isPopover",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "nodes",
                    "type": "Node",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodesCopy",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "popOverData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "popoverKeys",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "popOverText",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createPopOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport {Node,Edge} from '@Swimlane/ngx-graph';\n\n@Component({\n  selector: 'app-network-graph',\n  templateUrl: './network-graph.component.html',\n  styleUrls: ['./network-graph.component.scss']\n})\nexport class NetworkGraphComponent implements OnInit {\n@Input('item') graphCardItems:any;\n@Input('popover$') popover$:any;\nisPopover:any; \npublic edges:Edge;\npublic nodes:Node;\npublic popoverKeys:any;\npublic children:any;\npublic popOverData:any;\npublic popOverText:any;\npublic nodesCopy:any;\npublic edgesCopy:any;\n\n  constructor(private cd:ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    \n    \n    this.edges=this.graphCardItems.data.edges;\n    this.nodes=this.graphCardItems.data.nodes;\n    this.popover$.subscribe(x=>this.isPopover=x);\n    this.nodesCopy=JSON.parse(JSON.stringify(this.nodes));\n    this.edgesCopy=JSON.parse(JSON.stringify(this.edges));\n    if(this.isPopover){\n      this.popoverKeys=this.graphCardItems.items[0].fieldType;\n      this.createPopOver();\n    }\n  }\n  createPopOver(){\n    for(var i in this.nodesCopy){\n      this.popOverText={};\n      this.popOverData=[];\n      for(var j in this.popoverKeys){\n        if(this.nodesCopy[i].hasOwnProperty(this.popoverKeys[j])){\n          this.popOverText[this.popoverKeys[j]]=this.nodesCopy[i][this.popoverKeys[j]];\n        }\n      }\n      this.popOverData.push(this.popOverText);\n      this.nodesCopy[i]['popover']=this.popOverData;\n      console.log(\"hi\",this.nodesCopy[i]['popover'])\n      console.log(\"hello\",this,this.popOverData)\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".node-label{font-weight:bold;font-size:22px}\r\n",
                    "styleUrl": "./network-graph.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-graph class=\"chart-container\"\n[links]=\"edgesCopy\"\n[nodes]=\"nodesCopy\"\n[zoomLevel]=0.5>\n<ng-template #defsTemplate>\n    <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\">\n        <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\"/>\n    </svg:marker>\n</ng-template> \n<ng-template #nodeTemplate let-node>\n    <svg:g class=\"node\">\n        <svg:image [attr.href]=\"node.img\" [attr.height]=\"75\" [attr.width]=\"75\"\n        [appPopover]=\"node.popover\" class=\"popover\" placement=\"top\" delay=\"500\">\n    </svg:image>\n    <svg:text alignmnent-baseline=\"central\" [attr.x]=\"0\" [attr.y]=\"node.dimension.height\" class=\"node-label\">\n        {{node.label}}\n    </svg:text>\n    </svg:g>\n</ng-template>\n<ng-template #linkTemplate let-link>\n    <svg:g class=\"edge\">\n        <svg:path class=\"line\" stroke-width=\"3\" marker-end=\"url(#arrow)\">\n\n        </svg:path>\n        <svg:text class=\"edge-label\" text-anchor=\"middle\">\n            <textPath class=\"text-path\" [attr.href]=\"'#' +link.id\" [style.dominant-baseline]=\"link.dominantBaseline\" startOffset=\"50%\">\n                {{link.label}}\n            </textPath>\n        </svg:text>\n    </svg:g>\n</ng-template>\n</ngx-graph>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PieComponent",
            "id": "component-PieComponent-a964b9ee15649c96eb49b4e4ad6b6425",
            "file": "src/app/components/pie/pie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pie",
            "styleUrls": [
                "./pie.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pieChartData",
                    "type": "SingleDataSet",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartLegend",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartOptions",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartPlugins",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartType",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartOptions, ChartType } from 'chart.js';\nimport { Label, SingleDataSet } from 'ng2-charts';\n\n@Component({\n  selector: 'app-pie',\n  templateUrl: './pie.component.html',\n  styleUrls: ['./pie.component.scss']\n})\nexport class PieComponent implements OnInit {\n\n  @Input() data;\n  public pieChartType: ChartType;\n  public pieChartLabels:Label[];\n  public pieChartData:SingleDataSet;\n  public pieChartLegend;\n  public pieChartPlugins;\n  public pieChartOptions:ChartOptions;\n  \n  \n  \n  \n    constructor() {\n      this.pieChartType='pie';\n      this.pieChartOptions={\n      responsive:true,}\n      this.pieChartPlugins=[];\n     }\n  \n    ngOnInit(): void {\n      this.pieChartLabels=this.data.chartLabels;\n      this.pieChartLegend=this.data.showLegend;\n      this.pieChartData=this.data.chartData;\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pie.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display:block;\">\n    <canvas baseChart [data]=\"pieChartData\"\n    [labels]=\"pieChartLabels\" [options]=\"pieChartOptions\"\n    [plugins]=\"pieChartPlugins\" [legend]=\"pieChartLegend\" [chartType]=\"pieChartType\">\n    </canvas>\n    </div>\n    "
        },
        {
            "name": "RadarComponent",
            "id": "component-RadarComponent-c9e8eee97dea800f259a50f349a6858e",
            "file": "src/app/components/radar/radar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radar",
            "styleUrls": [
                "./radar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "radarChartData",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "radarChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "radarChartOptions",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "radarChartType",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-radar',\n  templateUrl: './radar.component.html',\n  styleUrls: ['./radar.component.scss']\n})\nexport class RadarComponent implements OnInit {\n\n  @Input() data;\npublic radarChartType: ChartType;\npublic radarChartLabels:Label[];\npublic radarChartData:ChartDataSets[];\npublic radarChartOptions:ChartOptions;\n\n\n\n\n  constructor() {\n    this.radarChartType='radar';\n    this.radarChartOptions={\n    responsive:true,}\n    \n   }\n\n  ngOnInit(): void {\n    this.radarChartLabels=this.data.chartLabels;\n    this.radarChartData=this.data.chartData;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display:block;\">\n    <canvas baseChart [datasets]=\"radarChartData\"\n    [labels]=\"radarChartLabels\" [options]=\"radarChartOptions\"\n     [chartType]=\"radarChartType\">\n    </canvas>\n    </div>\n    "
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-34f8add48eecac0b8af0b0930127c05e",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "line": 14
                },
                {
                    "name": "selectData",
                    "line": 13
                },
                {
                    "name": "selected",
                    "line": 15
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dashboardGroupItems",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "emitData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "filterValues$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "matSelect",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSelect"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "updateSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "category",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, ViewChild ,EventEmitter} from '@angular/core';\nimport { MatSelect } from '@angular/material/select';\nimport { Observable } from 'rxjs';\n\n\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n@Input() selectData;\n@Input() options;\n@Input() selected;\n@ViewChild(MatSelect) matSelect:MatSelect;\n@Output() selectionChange:EventEmitter<any>=new EventEmitter<any>();\ndashboardGroupItems:any;\nemitData:any;\nfilterValues$:Observable<any>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n   this.options= this.selectData.options;\n   this.selected=this.selectData.selected;\n  }\n\n  updateSelected(event:any,category:any){\n    if(event.isUserInput){\n      this. emitData={\n        category:category,\n        value:event.source.value};\n\n      }\n      this.selectionChange.emit(this.emitData);\n    }\n  }\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\">\n    <mat-label>Select {{selectData.category}}</mat-label>\n    <mat-select [(value)]=\"selected\">\n        <mat-option *ngFor=\"let option of options\" value=\"{{option.value}}\"\n        (onSelectionChange)=\"updateSelected($event,selectData.category)\">{{option.text}}</mat-option>\n    </mat-select>\n</mat-form-field>"
        },
        {
            "name": "SelectFilterComponent",
            "id": "component-SelectFilterComponent-52fc562d78926be4ff2cf6e8fd10a822",
            "file": "src/app/components/select-filter/select-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-filter",
            "styleUrls": [
                "./select-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hiddenColumnsList",
                    "line": 11,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleAllSelectEvent",
                    "line": 12,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "togglePerOneEvent",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allselected",
                    "type": "MatOption",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'allselected'"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "columnsForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "toggleAllSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "togglePerOne",
                    "args": [
                        {
                            "name": "col",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output,EventEmitter, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { MatOption } from '@angular/material/core';\n\n@Component({\n  selector: 'app-select-filter',\n  templateUrl: './select-filter.component.html',\n  styleUrls: ['./select-filter.component.scss']\n})\nexport class SelectFilterComponent implements OnInit {\n@Input() hiddenColumnsList:any[];\n@Output() toggleAllSelectEvent:EventEmitter<any>;\n@Output() togglePerOneEvent:EventEmitter<any>;\n@ViewChild('allselected') private allselected:MatOption;\ncolumnsForm:FormGroup;\n\n  constructor(private fb:FormBuilder) { \n    this.toggleAllSelectEvent=new EventEmitter();\n    this.togglePerOneEvent=new EventEmitter();\n  }\n\n  ngOnInit(): void {\n    this.columnsForm=this.fb.group({\n      columnControl:new FormControl('')\n    });\n  }\n\n  toggleAllSelection(){\n    this.toggleAllSelectEvent.emit({\n      allSelected:this.allselected,\n      columnsForm:this.columnsForm,\n    });\n  }\n\n  togglePerOne(col:string){\n    this.togglePerOneEvent.emit({\n      col:col,\n      allSelected:this.allselected,\n      columnsForm:this.columnsForm,\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field [formGroup]=\"columnsForm\">\n    <mat-label> Coulmns Visibility</mat-label>\n    <mat-select formControlName=\"columnControl\" multiple>\n        <mat-option #allSelected (click)=\"toggleAllSelection()\" [value]=\"0\">Select All</mat-option>\n        <hr>\n        <mat-option *ngFor=\"let col of hiddenColumnsList\" [value]=\"col\" (click)=\"togglePerOne(col)\">\n            {{col}}\n        </mat-option>\n    </mat-select>\n</mat-form-field>"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-529e8b99e159ec9ad7ff400ac55c562e",
            "file": "src/app/components/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-spinner></mat-spinner>"
        },
        {
            "name": "SummaryListComponent",
            "id": "component-SummaryListComponent-4f4fbe13da37466711d520800c58f2ad",
            "file": "src/app/components/summary-list/summary-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-summary-list",
            "styleUrls": [
                "./summary-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./summary-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "list",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-summary-list',\n  templateUrl: './summary-list.component.html',\n  styleUrls: ['./summary-list.component.scss']\n})\nexport class SummaryListComponent implements OnInit {\n@Input() list;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-row-title{font-weight:600}\r\n",
                    "styleUrl": "./summary-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p *ngFor=\"let summaryListRow of list\">\n    <span class=\"list-row-title\">{{summaryListRow.text}}</span>\n    <span *ngIf=\"summaryListRow.count\">:{{summaryListRow.count}}</span>\n    <span *ngIf=\"summaryListRow.category\">{{summaryListRow.category}}</span>\n</p>"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-39b7c1b64cb2820bc4907e0373108ab1",
            "file": "src/app/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tableItems$",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabItems",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss']\n})\nexport class TabsComponent implements OnInit {\n@Input() tableItems$:any;\ntabItems:any;\n\n  constructor(private cd:ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.tableItems$.subscribe(x=>{\n      this.tabItems=x;\n      this.cd.detectChanges();\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-tab-link{color:white;background-color:#0f203d;opacity:1}\r\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav *ngIf=\"tabItems\" mat-tab-nav-bar>\n    <a mat-tab-link *ngFor=\"let item of tabItems\" [routerLink]=\"['/view',item.slug,item.home_slug]\">{{item.title}}</a>\n</nav>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BarComponent"
                        },
                        {
                            "name": "BubbleComponent"
                        },
                        {
                            "name": "DoughnutComponent"
                        },
                        {
                            "name": "IframeComponent"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "LineComponent"
                        },
                        {
                            "name": "NetworkGraphComponent"
                        },
                        {
                            "name": "PieComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "RadarComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectFilterComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SummaryListComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MaterialComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/material/material.module.ts",
                "type": "[]",
                "defaultValue": "[MatSidenavModule,MatProgressSpinnerModule,MatTabsModule,MatSelectModule,MatFormFieldModule,ReactiveFormsModule]"
            },
            {
                "name": "NoImageCaption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Image.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Image.stories.ts",
                "type": "Story<ImageComponent>",
                "defaultValue": "(args: ImageComponent) => ({\r\n  component: ImageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "WithHalfOpacity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Image.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithImageCaption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Image.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithZeroOpacity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Image.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/material/material.module.ts": [
                {
                    "name": "MaterialComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/material/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[MatSidenavModule,MatProgressSpinnerModule,MatTabsModule,MatSelectModule,MatFormFieldModule,ReactiveFormsModule]"
                }
            ],
            "src/stories/Image.stories.ts": [
                {
                    "name": "NoImageCaption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Image.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Image.stories.ts",
                    "type": "Story<ImageComponent>",
                    "defaultValue": "(args: ImageComponent) => ({\r\n  component: ImageComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "WithHalfOpacity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Image.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithImageCaption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Image.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithZeroOpacity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Image.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bar/bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bubble/bubble.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BubbleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/doughnut/doughnut.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DoughnutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/iframe/iframe.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IframeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/line/line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/network-graph/network-graph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NetworkGraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pie/pie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/radar/radar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select-filter/select-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/summary-list/summary-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SummaryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/material/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoImageCaption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithHalfOpacity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithImageCaption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithZeroOpacity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}